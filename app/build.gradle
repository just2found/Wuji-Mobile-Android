apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//navigation
apply plugin: 'androidx.navigation.safeargs.kotlin'

apply plugin: 'kotlin-kapt' // if using Kotlin

def localProps = new Properties()
def projectRootDir = rootDir.getAbsolutePath()
def projectRootDirPath = rootDir.getAbsolutePath()
localProps.load(file(projectRootDirPath + '/local.properties').newDataInputStream())
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName getLinkmateVersionName()
        versionCode getLinkmateVersionCode()
        buildConfigField "String", "host", "\"app.memenet.net\""
        buildConfigField "String", "host_cn", "\"app.memenet.net\""
        buildConfigField "String", "host_us", "\"as.izzbie.com\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions "mobile"

    sourceSets.debug {
        res.srcDirs = ['src/debug/res']
    }
    flavorDimensions "mobile"

    productFlavors {
        WeLine {
            dimension "mobile"
            applicationId 'io.weline.mobile'
            buildConfigField "String", "host", "\"app.memenet.net\""
            buildConfigField "String", "host_cn", "\"app.memenet.net\""
            buildConfigField "String", "host_us", "\"as.izzbie.com\""
            manifestPlaceholders = [label: "Lenovo"]
            buildConfigField "Boolean", "isPubTest", "false"
            buildConfigField "Boolean", "isLightColor", "false"
            // splits {
            //     language {
            //         enable = true
            //         include "zh","zh-rTW","en"
            //     }
            // }
        }
        WeLinePubTest {
            dimension "mobile"
            applicationId 'io.weline.mobile.dev'
            buildConfigField "String", "host", "\"test.memenet.net\""
            buildConfigField "String", "host_cn", "\"test.memenet.net\""
            buildConfigField "String", "host_us", "\"test.memenet.net\""
//            buildConfigField "String", "host", "\"192.168.1.76\""
//            buildConfigField "String", "host_cn", "\"192.168.1.76\""
//            buildConfigField "String", "host_us", "\"192.168.1.76\""
            buildConfigField "Boolean", "isPubTest", "true"
            buildConfigField "Boolean", "isLightColor", "false"
            manifestPlaceholders = [label: "WeLinePubTest"]
            // splits {
            //     language {
            //         enable = false
            //         include "zh","zh-rTW","en"
            //     }
            // }
        }
        Lenovo {
            dimension "mobile"
            applicationId 'io.weline.mobile'
            buildConfigField "String", "host", "\"app.memenet.net\""
            buildConfigField "String", "host_cn", "\"app.memenet.net\""
            buildConfigField "String", "host_us", "\"as.izzbie.com\""
//            buildConfigField "String", "host", "\"192.168.1.76\""
//            buildConfigField "String", "host_cn", "\"192.168.1.76\""
//            buildConfigField "String", "host_us", "\"192.168.1.76\""
            buildConfigField "Boolean", "isPubTest", "false"
            buildConfigField "Boolean", "isLightColor", "true"
            manifestPlaceholders = [label: "Lenovo"]
            // splits {
            //     language {
            //         enable = true
            //         include "zh","zh-rTW","en"
            //     }
            // }
        }
        wuji {
            dimension "mobile"
            applicationId 'io.wuji.mobile'
            buildConfigField "String", "host", "\"app.memenet.net\""
            buildConfigField "String", "host_cn", "\"app.memenet.net\""
            buildConfigField "String", "host_us", "\"as.izzbie.com\""
            buildConfigField "Boolean", "isPubTest", "false"
            buildConfigField "Boolean", "isLightColor", "true"
            manifestPlaceholders = [label: "wuji"]
        }
        wujiPubTest {
            dimension "mobile"
            applicationId 'io.wuji.mobile'
            buildConfigField "String", "host", "\"test.memenet.net\""
            buildConfigField "String", "host_cn", "\"test.memenet.net\""
            buildConfigField "String", "host_us", "\"test.memenet.net\""
            buildConfigField "Boolean", "isPubTest", "false"
            buildConfigField "Boolean", "isLightColor", "true"
            manifestPlaceholders = [label: "wujiPubTest"]
        }
    }
    signingConfigs {
        debug {
            storeFile file(projectRootDirPath + "/demo.keyjks")
            storePassword "112233"
            keyAlias "sdvn demo"
            keyPassword "112233"
        }
        release {
            storeFile file(projectRootDirPath + "/demo.keyjks")
            storePassword "112233"
            keyAlias "sdvn demo"
            keyPassword "112233"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            manifestPlaceholders = [label: "debug"]
            minifyEnabled false
            debuggable = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                // Specifies the ABI configurations of your native
                // libraries Gradle should build and package with your APK.
                abiFilters 'armeabi-v7a', /*'x86_64',*/ 'arm64-v8a', 'x86'
//                abiFilters 'armeabi-v7a'
            }
//            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            debuggable = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                // Specifies the ABI configurations of your native
                // libraries Gradle should build and package with your APK.
                abiFilters /*'x86',*/ 'armeabi-v7a', /*'x86_64',*/ 'arm64-v8a'
            }
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            output.getProcessManifestProvider().get().doLast {
//                // Stores the path to the maifest.
//                def path = manifestOutputDirectory.get().getAsFile().getPath()
////                println("============ " + path + "/AndroidManifest.xml")
////                String manifestPath = "$manifestOutputDirectory/AndroidManifest.xml"
//                replaceManifestVersion(path + "/AndroidManifest.xml")
////                String manifestPath = "$manifestOutputDirectory/AndroidManifest.xml"
////                replaceManifestVersion(manifestPath/*, applicationId*/)
//            }
//        }
        def date = getBuildDate()
        variant.outputs.all {
            println("date : " + date)
            def suffix = "" == date ? "" : "_" + date
            def type = "_d"
            if (buildType.name == "release") {
                type = "_r"
            }
            outputFileName = "${variant.productFlavors[0].name}" + type + getBuildNumber() + suffix + ".apk"
            println("variant.name ============ " + outputFileName)
        }
        variant.assembleProvider.get().doLast { assemble ->
            def file = variant.outputs*.outputFile.get(0)
            def type = buildType.name
            def fileScp = new File(projectRootDirPath + "/scripts/scp.sh")
            if (fileScp.exists()) {
                def cmd = projectRootDirPath + "/scripts/scp.sh " + file + " /WeLine/" + type
                println(cmd)
                cmd.execute()
            }
        }
    }

    lintOptions {
//        checkReleaseBuilds false
        abortOnError false
    }

    repositories {
        flatDir {
            dirs '../libs'
        }
    }
//    javaCompileOptions {
//        annotationProcessorOptions {
//            arguments = [AROUTER_MODULE_NAME: project.getName()]
//        }
//    }
}
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation deps.junit
    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.espresso.core
//    implementation(name: rootProject.ext.libName, ext: 'aar')
//    implementation project(':cmlib_final')
    implementation deps.cmlib.common
//    implementation(name: 'zxinglib_v3_0_2090', ext: 'aar')
    implementation deps.qrcode

//    implementation project(':cmlib')
//    implementation project(':cmlib_cmg')
//    implementation project(':zxinglib')
    implementation deps.support.palette_ktx
    implementation deps.support.design
    implementation deps.support.cardview
    implementation deps.support.app_compat
    implementation deps.support.swiperefreshlayout
    implementation deps.lifecycle.livedata_ktx
    implementation deps.lifecycle.runtime_ktx
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.viewmodel_ktx
    implementation deps.paging_ktx
    implementation deps.paging_rx2
    implementation deps.support.vectordrawable_animated
    implementation deps.support.exifinterface
    implementation deps.support.constraint_layout
    implementation deps.support.fragment_runtime_ktx
    implementation deps.support.multidex
    implementation deps.support.viewpager2
    implementation deps.support.transition_ktx
    implementation deps.support.recyclerview
    implementation deps.eventbus
    implementation deps.gson
    implementation deps.work.runtime_ktx
    implementation deps.disklrucache
    implementation deps.PhotoView

    //glide
    implementation deps.glide.runtime
    implementation deps.glide.gifdecoder
    kapt deps.glide.compiler
    implementation deps.glide.okhttp3_integration
    //----------------- http --------------
    implementation deps.okhttp3
    implementation deps.okhttp_logging_interceptor

    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.retrofit.rxjava

    implementation deps.rx_android
    implementation deps.rxjava2


    implementation deps.navigation.runtime_ktx
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx
    //RxBinding
//    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    //国家地区编码
    implementation deps.ccp

//    implementation deps.butterknife
//    kapt deps.butterknife_compiler
//    implementation 'com.contrarywind:Android-PickerView:4.1.9'
    implementation deps.picker_view
//    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.49-androidx'

    //kotlin std
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.test
    implementation deps.kotlin.allopen
    implementation deps.kotlin.coroutines

//    compileOnly "org.projectlombok:lombok:$lombok"
//    annotationProcessor "org.projectlombok:lombok:$lombok"
//---------------db------------------
    debugImplementation deps.objectbox_android_debug
    releaseImplementation deps.objectbox_android_release
    implementation deps.objectbox_rxjava
    implementation deps.objectbox_kotlin
    //---------------db------------------
    implementation project(':nascommonlib')
    implementation project(':internetlib')
//    implementation project(':internetdb')
    implementation project(':scorepaylib')
    implementation project(':libwidget')
//    implementation project(':BRVAH')
    implementation(name: "brvah-2.9.50", ext: 'aar')
//    implementation 'com.yanzhenjie:permission:2.0.3'
    implementation(name: "andPermission_r2.0.3", ext: 'aar')
//    implementation(name: "magicdialog-1.0.0", ext: 'aar')

//    implementation(name: "toolargetool", ext: 'aar')
//    implementation 'com.gu.android:toolargetool:0.2.1@aar'
    implementation deps.subsampling_scale_image_view


    //leak canary
    debugImplementation deps.leakcanary_android_debug
    releaseImplementation deps.leakcanary_android_release

    implementation deps.timber

//    implementation deps.loading.button

    implementation deps.rxlife
    implementation deps.rxkotlin
    implementation deps.flexbox
    implementation deps.support.localbroadcastmanager
    implementation deps.support.documentfile

    implementation 'com.tencent.bugly:crashreport:3.2.3'
    //wx 支付依赖(包含统计功能)
//    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.4.0'
    //不包含统计功能
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.6.19'

    //图表
    implementation deps.MPAndroidChart
    implementation project(':devhelper')
//    implementation project(':libtorrentclient')
    implementation project(':common')
    implementation project(':libtorrentsrepo')
//    implementation(name: 'libtorrentclient_v1_0_1_20200629_release', ext: 'aar')

    implementation deps.arouter.api
    kapt deps.arouter.compiler
//    implementation deps.arouter.annotation

    implementation project(path: ':strings')
    implementation project(':libwidget')
    implementation deps.rv_decorator
    implementation project(':libfilesrepo')
    implementation project(path: ':libimageloader')

//    implementation deps.EasyPhotos
//    implementation project(':easyPhotos')
    implementation(name: 'easyPhotos_v2_5_6_1_release', ext: 'aar')
    implementation 'com.joker.HuanTanSheng:UCrop:andX-2.5.1'
    implementation deps.xpopup

    implementation deps.exoplayer
    implementation deps.exoplayerCore
    implementation deps.exoplayerUI
    implementation deps.flexbox

    //poster
    implementation "androidx.room:room-runtime:2.2.3"
    implementation "androidx.room:room-ktx:2.2.3"
    kapt "androidx.room:room-compiler:2.2.3"
    implementation 'org.apache.commons:commons-compress:1.18'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"

}

import java.util.regex.Matcher
import java.util.regex.Pattern

def getBuildDate() {
    def versionFile = file("../version.properties")
    if (versionFile.canRead()) {
        Properties versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionFile))
        def date = ""
        if (versionProperties["USE_DATE"] == "true") {
            date = new Date().format("yyyyMMddHHmm")
//            versionProperties["BUILD_DATE"] = date
//            versionProperties.store(new FileOutputStream(versionFile), "versions")
        }
        return date
    } else println("version file can not read: " + versionFile)
    return ""
}

def getBuildNumber() {
//    def count = "git rev-list HEAD --count".execute().text.trim().toInteger()
//    def count = "svn info --show-item last-changed-revision".execute().text.trim()
//    def count = getSvnVersionCode()
//    def count = 2
//    def versionFile = file("../version.properties")
//    if (versionFile.canRead()) {
//        Properties versionProperties = new Properties()
//        versionProperties.load(new FileInputStream(versionFile))
//        if (versionProperties["USE_DATE"] == "true" && count <= 0) {
//            return versionProperties["build_number_onechainspace"].toInteger()
//        } else {
//            return count.toInteger() + 3023
//        }
//    } else println("version file can not read: " + versionFile)
    return 18
}

/***********************读取SVN信息***********************/
/**
 * 根据svn提交版本生成版本号
 * @return
 */
def getSvnVersionCode() {
    try {
        def process = ("svnversion -c " + getBuildDir().parent).execute()
        process.waitFor()
        def version = process.in.text
        println version
        Pattern pattern = Pattern.compile("(\\d+:)?(\\d+)\\D")
        Matcher matcher = pattern.matcher(version)
        if (matcher.find()) {
            version = matcher.group(matcher.groupCount())
        }
        println version
        return Integer.parseInt(version)
    } catch (e) {
        println e.getMessage()
        try {
            return "svn info --show-item last-changed-revision".execute().text.trim().toInteger()
        } catch (e1) {
            println e1.getMessage()
        }
    }
    return 1
}

def getLinkmateVersionCode() {
    def versionCode = getBuildNumber()
    return versionCode
}

def getLinkmateVersionName() {
    def majorVersion = 1
    def minorVersion = 0
    def pointVersion = 18
    def versionName = majorVersion + "." + minorVersion + "." + pointVersion
    return versionName
}

def replaceManifestVersion(filename/*, applicationId*/) {
    println("manifest ======" + filename)
    def manifestFile = new File("${filename}")
    def manifestText = manifestFile.getText()

    def vcMatcher = Pattern.compile("versionCode=\"(\\d+)\"").matcher(manifestText)
    manifestText = vcMatcher.replaceAll("versionCode=\"" + getLinkmateVersionCode() + "\"")

    def vnMatcher = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"").matcher(manifestText)
    manifestText = vnMatcher.replaceAll("versionName=\"" + getLinkmateVersionName() + "\"")
//    def fileProvider = Pattern.compile('android:authorities="net.linkmate.app.mcs.fileprovider"').matcher(manifestText)
//    manifestText = fileProvider.replaceAll('android:authorities=\"' + applicationId + '.fileprovider\"')
    manifestFile.write(manifestText)
}
